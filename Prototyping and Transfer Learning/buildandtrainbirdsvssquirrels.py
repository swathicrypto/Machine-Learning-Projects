# -*- coding: utf-8 -*-
"""buildAndTrainBirdsVsSquirrels

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TOdFZbquB4855HMw04ktOUiqvLQilUKN
"""

#This code is to differentiate between 1. Birds (no squirrels/chipmunks) 2. Squirrel/Chipmunk
#3. feeder or tree without squirrels, chipmunks, or birds.
#Mount drive.

from google.colab import drive

#for authorisation
drive.mount('/content/drive')

#Drive files in "/content/drive/My Drive".
!ls "/content/drive/My Drive"

import tensorflow as tf
import numpy as np

filepath=['/content/drive/My Drive/birds-vs-squirrels-train.tfrecords']
filepath1=['/content/drive/My Drive/birds-vs-squirrels-validation.tfrecords']

raw_birdSquirrel_training_dataset=tf.data.TFRecordDataset(filepath)
raw_birdSquirrel_validation_dataset=tf.data.TFRecordDataset(filepath1)

#Need to create testing set from given sets.
datLen=raw_birdSquirrel_training_dataset.reduce(0,lambda x,y: x+1)

n_train=int(datLen.numpy()*.85)
n_test=int(datLen.numpy()*.15)

feature_description={'image':tf.io.FixedLenFeature([],tf.string),'label':tf.io.FixedLenFeature([],tf.int64)}

#Define parse example to load data.

def parse_examples(serialized_examples):
  examples=tf.io.parse_example(serialized_examples,feature_description)
  targets=examples.pop('label')
  images=tf.image.resize_with_pad(tf.cast(tf.io.decode_jpeg(examples['image'],channels=3),tf.float32),299,299)
  return images, targets

#Load in dataset.
#But do I want to load it as supervised.
training_dataset_BS=raw_birdSquirrel_training_dataset.take(n_train).map(parse_examples,num_parallel_calls=tf.data.AUTOTUNE)
validation_dataset_BS=raw_birdSquirrel_validation_dataset.map(parse_examples,num_parallel_calls=tf.data.AUTOTUNE)

testing_dataset_BS=raw_birdSquirrel_training_dataset.skip(n_train).take(n_test).map(parse_examples,num_parallel_calls=tf.data.AUTOTUNE)

#Print to see if working.
#for el in training_dataset_BS.take(1):
#  print(el)

#Preprocessing layer.

def preproc(image,label):
  inp=tf.keras.applications.xception.preprocess_input(image)
  return inp,label

#Apply preprocessing layer.

training_dataset_BS1=training_dataset_BS.take(n_train).map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)
validation_dataset_BS1=validation_dataset_BS.map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)

testing_dataset_BS1=testing_dataset_BS.skip(n_train).take(n_test).map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)

#Defining model.

#Remove top layer and look.

base_model=tf.keras.applications.xception.Xception(weights='imagenet',include_top=False)
#base_model.summary()

#Add new top layer.
avg=tf.keras.layers.GlobalAveragePooling2D()(base_model.output)
output=tf.keras.layers.Dense(3,activation="softmax")(avg)
model=tf.keras.models.Model(inputs=base_model.input,outputs=output)
#model.summary()

#Freeze the weights of the lower layers.
#Why when print, the last two are true? SHouldn't it just be the last?

for layer in base_model.layers:
  layer.trainable=False

#for layer in model.layers:
#  print(layer.trainable)

#Fit the new upper layer.

checkpoint_cb=tf.keras.callbacks.ModelCheckpoint('BirdSquirrelMod-topFit.tgz',save_best_only=True)

earlyStop_cb=tf.keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)

ss=0.001

opt=tf.keras.optimizers.SGD(learning_rate=ss)

model.compile(loss="sparse_categorical_crossentropy",optimizer=opt,metrics=["accuracy"])

model.fit(training_dataset_BS1,validation_data=validation_dataset_BS1,epochs=20,callbacks=[checkpoint_cb,earlyStop_cb])

tf.saved_model.save(model, '/content/drive/My Drive/birdsVsSquirrelsModel')