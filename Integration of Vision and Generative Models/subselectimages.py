# -*- coding: utf-8 -*-
"""subSelectImages

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y5MOjoS95G-uZZQx_k2zgyvxXcEMZnoL
"""

##Can detect (and subselect) squirrels and birds using the COCO model.
##Remaining: Detecting birdfeeders.
##Method: download .tar files from ImageNet21k for (1) birdfeeder (2) grass (3) trees.
##Create a tf record with (1) as 1 and (2,3) as 0, and train a model that can detect a birdfeeder from the background.
##Using that model, subselect.

##Find wordnetIDs:
##For birdfeeders:

#import nltk
#from nltk.corpus import wordnet as wn

#nltk.download('wordnet')

#wn.synset('birdfeeder.n.01')
#birdfeeder=wn.synset('birdfeeder.n.01')
#birdfeederWnID='n'+str(birdfeeder.offset()).zfill(8)
#birdfeederWnID

##Result:'n02843553'

#wn.synset('grass.n.01')
#grass=wn.synset('grass.n.01')
#grassWnID='n'+str(grass.offset()).zfill(8)
#grassWnID

##Result:'n12102133'

#wn.synset('tree.n.01')
#tree=wn.synset('tree.n.01')
#treeWnID='n'+str(tree.offset()).zfill(8)
#treeWnID

##Result:'n13104059'

##synset XXXX available at https://image-net.org/data/winter21_whole/XXXX.tar

##Then download the .tar files and process it via the following code:

##tar_file: oath where .tar file is
##path: the path to extract to.

#import tarfile

#def extract(tar_file, path):
#    opened_tar = tarfile.open(tar_file)
#
#    if tarfile.is_tarfile(tar_file):
#        opened_tar.extractall(path)

#extract('/content/drive/My Drive/n02843553.tar', '/content/drive/My Drive/birdfeeder_set/')
#extract('/content/drive/My Drive/n12102133.tar', '/content/drive/My Drive/grass_set/')
#extract('/content/drive/My Drive/n13104059.tar', '/content/drive/My Drive/tree_set/')

from google.colab import drive

#for authorisation
drive.mount('/content/drive')

#Drive files in "/content/drive/My Drive".
!ls "/content/drive/My Drive"

##create tfrecords for birdfeeder model.
#import os

#birdfeeder_path= '/content/drive/My Drive/birdfeeder_set/'
#grass_path='/content/drive/My Drive/grass_set/'
#tree_path= '/content/drive/My Drive/tree_set/'

#import os
#import tensorflow as tf

#def readImages(path):
#  images=[]
#  for filename in os.listdir(path):
#    img_path= os.path.join(path, filename)
#    img= tf.io.read_file(img_path)
#    images.append(img)
#  return images

#dataDict= {"image":[], "label": []}

#def createDict(folder_path, label):
#  images= readImages(folder_path)
#  for img in images:
#    dataDict["image"].append(img)
#    dataDict["label"].append(label)
#  return dataDict

##Create dictionaries for all sets; set 1 for birdfeeder, 0 for trees and grass.

#birdfeeder_Dict=createDict(birdfeeder_path, 1)
#grass_Dict=createDict(grass_path, 0)
#tree_Dict=createDict(tree_path, 0)

##Let's concatenate all dictionaries. (.extend works on lists)

#birdfeeder_Dict['image'].extend(grass_Dict['image'])
#birdfeeder_Dict['image'].extend(tree_Dict['image'])
#print(birdfeeder_Dict['image'])

#birdfeeder_Dict['label'].extend(grass_Dict['label'])
#birdfeeder_Dict['label'].extend(tree_Dict['label'])
#print(birdfeeder_Dict['label'])

##Let's check that the dictionaries merged properly.

#print(len(birdfeeder_Dict["image"]))
#print(len(tree_Dict["image"]))
#print(len(grass_Dict["image"]))
#print(len(birdfeeder_Dict["image"])+ len(tree_Dict["image"]) +len(grass_Dict["image"]))

##Worked for images. Now make sure the number of labels matches.
#print(len(birdfeeder_Dict["label"])+ len(tree_Dict["label"]) +len(grass_Dict["label"]))

#Worked :)

#import numpy as np

##The following doesn't work because it crashes the runtime.

#imsToShuffle=birdfeeder_Dict['image']
#labelsToShuffle=birdfeeder_Dict['label']

#shuff=np.random.permutation(len(imsToShuffle))
#shuffIms=np.array(imsToShuffle)[shuff]
#shufflab=np.array(labelsToShuffle)[shuff]

##So, we try again to shuffle:

#imsToShuffle=birdfeeder_Dict['image']
#labelsToShuffle=birdfeeder_Dict['label']

#shuff=np.random.permutation(len(imsToShuffle))

#with tf.io.TFRecordWriter('/content/drive/My Drive/hw3_dataset.tfrecord') as f:
#  for smth in shuff:
#    ex=tf.train.Example(features=tf.train.Features(feature={
#            'image':tf.train.Feature(bytes_list=tf.train.BytesList(value=[imsToShuffle[smth].numpy()])),
#            'label':tf.train.Feature(int64_list=tf.train.Int64List(value=[labelsToShuffle[smth]]))}))
#    f.write(ex.SerializeToString())

#print(shuffedIms)
#print(shuffedlabels)

##Now load in tfrecords.
#import tensorflow as tf

#birdfeederModel_filepath=['/content/drive/My Drive/hw3_dataset.tfrecord']

#raw_birdfeederModel_dataset=tf.data.TFRecordDataset(birdfeederModel_filepath)

#import numpy

#datLen=raw_birdfeederModel_dataset.reduce(0,lambda x,y: x+1)

#n_train=int(datLen.numpy()*.70)
#n_val=int(datLen.numpy()*.20)
#n_test=int(datLen.numpy()*.10)

#feature_description={'image':tf.io.FixedLenFeature([],tf.string),'label':tf.io.FixedLenFeature([],tf.int64)}

##Define parse example to load data.

#def parse_examples(serialized_examples):
#  examples=tf.io.parse_example(serialized_examples,feature_description)
#  targets=examples.pop('label')
#  images=tf.image.resize_with_pad(tf.cast(tf.io.decode_jpeg(examples['image'],channels=3),tf.float32),299,299)
#  return images, targets

#training_dataset_BS=raw_birdfeederModel_dataset.take(n_train).map(parse_examples,num_parallel_calls=tf.data.AUTOTUNE)
#validation_dataset_BS=raw_birdfeederModel_dataset.skip(n_train).take(n_val).map(parse_examples,num_parallel_calls=tf.data.AUTOTUNE)
#testing_dataset_BS=raw_birdfeederModel_dataset.skip(n_train).skip(n_val).take(n_test).map(parse_examples,num_parallel_calls=tf.data.AUTOTUNE)

#def preproc(image,label):
#  inp=tf.keras.applications.xception.preprocess_input(image)
#  return inp,label

#training_dataset_BS1=training_dataset_BS.take(n_train).map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)
#validation_dataset_BS1=validation_dataset_BS.map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)

#testing_dataset_BS1=testing_dataset_BS.skip(n_train).take(n_test).map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)

#base_model=tf.keras.applications.xception.Xception(weights='imagenet',include_top=False)

#avg=tf.keras.layers.GlobalAveragePooling2D()(base_model.output)
#output=tf.keras.layers.Dense(2,activation="softmax")(avg)
#model=tf.keras.models.Model(inputs=base_model.input,outputs=output)

#for layer in base_model.layers:
#  layer.trainable=False

#checkpoint_cb=tf.keras.callbacks.ModelCheckpoint('BirdfeederMod-topFit.tgz',save_best_only=True)

#earlyStop_cb=tf.keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)

#ss=0.001

#opt=tf.keras.optimizers.SGD(learning_rate=ss)

#model.compile(loss="sparse_categorical_crossentropy",optimizer=opt,metrics=["accuracy"])

#model.fit(training_dataset_BS1,validation_data=validation_dataset_BS1,epochs=20,callbacks=[checkpoint_cb,earlyStop_cb])

#model.save('/content/drive/My Drive/BirdfeederModel')

##we can create a tfrecords for both squirrels and birds to get a model that subselects both birds and squirrels if its not good enough. (repeat the cells above)

##for now, test using the coco segmenter for birds (17) and squirrels (18), to create a function that subselects images with birdfeeders and birds, and then birdfeeders and squirrels.

##Take a list of filenames of jpeg files. Finding birds.
#import matplotlib.pyplot as plt
#import os
#import tensorflow_hub as tfhub
#import numpy as np

##get a bunch of random pictures, and then choose 10 pictures of birds with birdfeeders. (in birdfeeder_set folder)

#path='/content/drive/My Drive/bird_birdfeeder_random/'
#testing_birdsAtFeeder=os.listdir(path)

#os.environ['TF_CPP_MIN_LOG_LEVEL']='3'
#model_coco = tfhub.load('https://tfhub.dev/google/HRNet/coco-hrnetv2-w48/1')

#select 20 images at random, from the folder to see if the segmentation is working.
#useBirds_Birdfeeder=np.array(testing_birdsAtFeeder)[np.random.permutation(len(testing_birdsAtFeeder))[0:20]]

#for brd in useBirds_Birdfeeder:
#  inIm=tf.io.decode_jpeg(tf.io.read_file(path +brd),channels=3)
#  resp_bird_birdfeeder=model_coco.predict([tf.cast(inIm,tf.float32)/255.])
#  myIm=resp_bird_birdfeeder.numpy()

#  maskIm_bird=np.ones_like(inIm)
#  mask_bird=tf.squeeze(resp_bird_birdfeeder)[:,:,17]>.4
#  if len(inIm[mask_bird])>0:
#    maskIm_bird=inIm[mask_bird].numpy().max()*maskIm_bird

#  maskIm_bird[mask_bird]=inIm[mask_bird]

#  for ax in range(202):
#    test=myIm[:,:,:,17].max()
#    if test>.99:
#      plt.figure(figsize=(16,32))
#      plt.subplot(1,2,1)
#      plt.imshow(maskIm_bird)
#      plt.subplot(1,2,2)
#      plt.imshow(inIm)

##this routine works to find birds in the folder.

##Testing birdfeeder model for its shape.
#import tensorflow as tf

#birdfeeder_test='/content/drive/My Drive/Copy of 4131.jpg'

#model_birdfeeder=tf.keras.models.load_model('/content/drive/My Drive/BirdfeederModel')

#birdfeederimage=tf.io.decode_jpeg(tf.io.read_file(birdfeeder_test),channels=3)
#batched_image = tf.expand_dims(birdfeederimage, axis=0)
#model_birdfeeder.predict([tf.cast(batched_image,tf.float32)/255.])

#resp_birdfeeder=model_birdfeeder.predict([tf.cast(birdfeederimage,tf.float32)/255.])
#print(resp_birdfeeder.shape)

##Take a list of filenames of jpeg files. Finding birdfeeder.
#import matplotlib.pyplot as plt
#import os
#import tensorflow_hub as tfhub
#import numpy as np

##get a bunch of random pictures, and then choose 10 pictures of birds with birdfeeders. (in birdfeeder_set folder)

#path='/content/drive/My Drive/bird_birdfeeder_random/'
#testing_birdsAtFeeder=os.listdir(path)

#model_birdfeeder=tf.keras.models.load_model('/content/drive/My Drive/BirdfeederModel')

##select 20 images at random, from the folder to see if the segmentation is working.
#useBirds_Birdfeeder=np.array(testing_birdsAtFeeder)[np.random.permutation(len(testing_birdsAtFeeder))[0:20]]

#for fdr in useBirds_Birdfeeder:
#  inIm1=tf.io.decode_jpeg(tf.io.read_file(path +fdr),channels=3)
#  batched_image = tf.expand_dims(inIm1, axis=0)
#  resp_bird_birdfeeder=model_birdfeeder.predict([tf.cast(batched_image,tf.float32)/255.])

#  prob_birdfeeder=resp_bird_birdfeeder[0,1]

#  if prob_birdfeeder > .7:
#    plt.figure(figsize=(16,32))
#    plt.subplot(1,2,2)
#    plt.imshow(inIm1)


#  myIm1=resp_bird_birdfeeder.np.append()

#    test=myIm1[:,ax]
#    if test>.7:
#      plt.figure(figsize=(16,32))
#      plt.subplot(1,2,2)
#      plt.imshow(inIm1)

##this routine works to find birds in the folder.

!pip install pillow

import os

os.environ['TF_CPP_MIN_LOG_LEVEL']='3'

import tensorflow as tf
import matplotlib.pyplot as plt
import tensorflow_hub as tfhub
import numpy as np
from PIL import Image

path='/content/drive/My Drive/bird_birdfeeder_random/'
listFileNames=os.listdir(path)
listFileNames

#Instead of just returning the filenames, I had it return the actual image too.
#The problem says to take in a list of file names, but taking a string (the name of the file) won't give you the image data, so I'm asking for the path of a folder with
#images instead.

def subSelectImages_BirdBirdfeeder(fileList):

  output_5_BirdsBirdfeeder_filename= []

  model_birdfeeder=tf.keras.models.load_model('/content/drive/My Drive/BirdfeederModel')

  model_coco = tfhub.load('https://tfhub.dev/google/HRNet/coco-hrnetv2-w48/1')

  #Choosing at random:
  file_length=len(fileList)
  useBirds_Birdfeeder=np.array(fileList)[np.random.permutation(file_length)[0:file_length]]

  for flname in useBirds_Birdfeeder:

#    image_path = '/content/drive/My Drive/bird_birdfeeder_random/' + flname
    image_path = flname
    with tf.io.gfile.GFile(image_path, 'rb') as file:
      image_data = file.read()
    image_format = Image.open(image_path).format

    if image_format.lower() in ('jpeg', 'png', 'gif', 'bmp'):

      inIm=tf.io.decode_jpeg(tf.io.read_file(image_path),channels=3)
      resized_image = tf.image.resize(inIm, [299, 299])
      batched_image = tf.expand_dims(resized_image, axis=0)
      resp_birdfeeder=model_birdfeeder.predict([tf.cast(batched_image,tf.float32)/255.])

      prob_birdfeeder=resp_birdfeeder[0,1]
      #[0,1] is the same as [0][1]

      resp_bird=model_coco.predict([tf.cast(resized_image,tf.float32)/255.])
      myIm=resp_bird.numpy()

      test=myIm[:,:,:,17].max()

      if test>.99 and prob_birdfeeder > .7:
        output_5_BirdsBirdfeeder_filename.append(flname)

        if len(output_5_BirdsBirdfeeder_filename) == 5:
          break

  return output_5_BirdsBirdfeeder_filename

five_birdsAtFeeder=subSelectImages_BirdBirdfeeder(listFileNames)

#five_birdsAtFeeder will return the names of the images.

five_birdsAtFeeder

path='/content/drive/My Drive/squirrel_birdfeeder_random/'
listFileNames1=os.listdir(path)
listFileNames1

#Subselect for squirrels using the same method.

def subSelectImages_SquirrelBirdfeeder(fileList):

  output_5_SquirrelBirdfeeder_filename= []

  model_birdfeeder=tf.keras.models.load_model('/content/drive/My Drive/BirdfeederModel')

  model_coco = tfhub.load('https://tfhub.dev/google/HRNet/coco-hrnetv2-w48/1')

  #I want it to choose at random:
  file_length=len(fileList)
  useSquirrels_Birdfeeder=np.array(fileList)[np.random.permutation(file_length)[0:file_length]]

  for imgName in useSquirrels_Birdfeeder:
#    image_path= imgName
    image_path = '/content/drive/My Drive/squirrel_birdfeeder_random/' + imgName
    with tf.io.gfile.GFile(image_path, 'rb') as file:
      image_data = file.read()
    image_format = Image.open(image_path).format

    if image_format.lower() in ('jpeg', 'png', 'gif', 'bmp'):
      inIm=tf.io.decode_jpeg(tf.io.read_file(image_path),channels=3)
      resized_image = tf.image.resize(inIm, [299, 299])
      batched_image = tf.expand_dims(resized_image, axis=0)
      resp_birdfeeder=model_birdfeeder.predict([tf.cast(batched_image,tf.float32)/255.])

      prob_birdfeeder=resp_birdfeeder[0,1]
      #[0,1] is the same as [0][1]

      resp_squirrel=model_coco.predict([tf.cast(resized_image,tf.float32)/255.])
      myIm=resp_squirrel.numpy()

      test=myIm[:,:,:,18].max()

      if test>.7 and prob_birdfeeder > .7:
        output_5_SquirrelBirdfeeder_filename.append(imgName)

        if len(output_5_SquirrelBirdfeeder_filename) == 5:
          break

  return output_5_SquirrelBirdfeeder_filename

five_SquirrelsAtFeeder=subSelectImages_SquirrelBirdfeeder(listFileNames1)

five_SquirrelsAtFeeder